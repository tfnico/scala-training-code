These examples are gathered from http://matt.might.net/articles/learning-scala-in-small-bites/ 

h2. Factorial

<pre>
 0 => 1
 1 => 1
 2 => 2 * 1
 3 => 3 * 2 * 1
 4 => 4 * 3 * 2 * 1
 5 => 5 * 4 * 3 * 2 * 1
</pre>


 f(5,4,3,2,1) = 5 * f(4,3,2,1)
 f(4,3,2,1) = 4 * f(3,2,1)
 f(3,2,1) = 3 * f(2,1)
 f(2, 1) = 2 * f(1)
 f(1) = 1


h2. Iterative

Algorithm:
 loop (5,4,3,2,1):
  each: result = result * n
  decrease n with 1
  repeat until 1

Output:
 fact(5) = 
 1   
 5
 20
 60
 120


h2. Recursive

 fact(5) = 5 * fact(4)
        = 5 * (4 * fact(3))
        = 5 * (4 * (3 * fact(2)))
        = 5 * (4 * (3 * (2 * fact(1))))
        = 5 * (4 * (3 * (2 * (1*fact(0)))))
        ....................................
        = 5 * (4 * (3 * (2 * (1*1))))
        = 5 * (4 * (3 * (2 * (1))))
        = 5 * (4 * (3 * (2)))
        = 5 * (4 * 6)
        = 5 * 24
        = 120

h2. Tail recursive

 fact(5)  = f(4, 1*5)
 f(4,5)   = f(3, 5*4)
 f(3,20)  = f(2, 20*3)
 f(2,60)  = f(1, 60*2)
 f(1,120) = 1 * 120

h2. Pattern matching

 [Same evaluation as recursive]

h2. Pattern matching with tail recursion

 [Same as above]

h2. Fold Left

 def foldLeft[B] (z : B) (op : (B, A) => B) : B
 Combines the elements of this iterable object together using the binary function f, from left to right, and starting with the value z.

 Our operation is  A * B

 (1)    [1, 2, 3, 4, 5] 
 (1*1)  [2, 3, 4, 5]
 (1*2)  [3, 4, 5]
 (2*3)  [4, 5]
 (6*4)  [5]
 (24*5) []
 120

h2. Fold Right

 [1, 2, 3, 4, 5] (1) 
 [1, 2, 3, 4]    (1*5) 
 [1, 2, 3]       (5*4) 
 [1, 2]         (20*3) 
 [1]            (60*2) 
 []            (120*1) 

 :\ [B](z : B)(op : (A, B) => B) : B
 An alias for foldRight. That is, xs :\ z is the same as xs foldRight z

h2. Reduce right

Same as fold, only no starting value.

